/* 
 * My Title
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.ApiClient.Client.SwaggerDateConverter;

namespace IO.ApiClient.Model
{
    /// <summary>
    /// Trade
    /// </summary>
    [DataContract]
    public partial class Trade :  IEquatable<Trade>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Trade() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Trade" /> class.
        /// </summary>
        /// <param name="buyUserId">buyUserId.</param>
        /// <param name="sellUserId">sellUserId.</param>
        /// <param name="symbol">symbol.</param>
        /// <param name="tradeQuantity">tradeQuantity (required).</param>
        /// <param name="tradePrice">tradePrice (required).</param>
        public Trade(string buyUserId = default(string), string sellUserId = default(string), string symbol = default(string), int? tradeQuantity = default(int?), double? tradePrice = default(double?))
        {
            // to ensure "tradeQuantity" is required (not null)
            if (tradeQuantity == null)
            {
                throw new InvalidDataException("tradeQuantity is a required property for Trade and cannot be null");
            }
            else
            {
                this.TradeQuantity = tradeQuantity;
            }
            // to ensure "tradePrice" is required (not null)
            if (tradePrice == null)
            {
                throw new InvalidDataException("tradePrice is a required property for Trade and cannot be null");
            }
            else
            {
                this.TradePrice = tradePrice;
            }
            this.BuyUserId = buyUserId;
            this.SellUserId = sellUserId;
            this.Symbol = symbol;
        }
        
        /// <summary>
        /// Gets or Sets BuyUserId
        /// </summary>
        [DataMember(Name="buyUserId", EmitDefaultValue=false)]
        public string BuyUserId { get; set; }

        /// <summary>
        /// Gets or Sets SellUserId
        /// </summary>
        [DataMember(Name="sellUserId", EmitDefaultValue=false)]
        public string SellUserId { get; set; }

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name="symbol", EmitDefaultValue=false)]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets TradeQuantity
        /// </summary>
        [DataMember(Name="tradeQuantity", EmitDefaultValue=false)]
        public int? TradeQuantity { get; set; }

        /// <summary>
        /// Gets or Sets TradePrice
        /// </summary>
        [DataMember(Name="tradePrice", EmitDefaultValue=false)]
        public double? TradePrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Trade {\n");
            sb.Append("  BuyUserId: ").Append(BuyUserId).Append("\n");
            sb.Append("  SellUserId: ").Append(SellUserId).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  TradeQuantity: ").Append(TradeQuantity).Append("\n");
            sb.Append("  TradePrice: ").Append(TradePrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Trade);
        }

        /// <summary>
        /// Returns true if Trade instances are equal
        /// </summary>
        /// <param name="input">Instance of Trade to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Trade input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BuyUserId == input.BuyUserId ||
                    (this.BuyUserId != null &&
                    this.BuyUserId.Equals(input.BuyUserId))
                ) && 
                (
                    this.SellUserId == input.SellUserId ||
                    (this.SellUserId != null &&
                    this.SellUserId.Equals(input.SellUserId))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.TradeQuantity == input.TradeQuantity ||
                    (this.TradeQuantity != null &&
                    this.TradeQuantity.Equals(input.TradeQuantity))
                ) && 
                (
                    this.TradePrice == input.TradePrice ||
                    (this.TradePrice != null &&
                    this.TradePrice.Equals(input.TradePrice))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BuyUserId != null)
                    hashCode = hashCode * 59 + this.BuyUserId.GetHashCode();
                if (this.SellUserId != null)
                    hashCode = hashCode * 59 + this.SellUserId.GetHashCode();
                if (this.Symbol != null)
                    hashCode = hashCode * 59 + this.Symbol.GetHashCode();
                if (this.TradeQuantity != null)
                    hashCode = hashCode * 59 + this.TradeQuantity.GetHashCode();
                if (this.TradePrice != null)
                    hashCode = hashCode * 59 + this.TradePrice.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
